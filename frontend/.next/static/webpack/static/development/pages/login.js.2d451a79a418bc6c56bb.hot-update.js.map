{"version":3,"file":"static/webpack/static/development/pages/login.js.2d451a79a418bc6c56bb.hot-update.js","sources":["webpack:///./lib/session.js","webpack:///./pages/login.js"],"sourcesContent":["/**\n * Provides cookie based session management functions\n */\n\nimport Cookies from 'js-cookie'\n\nexport const setCookie = (key, value) => {\n  if (process.browser) { Cookies.set(key, value, { expires: 1, path: '/' }) }\n}\n\nexport const getCookie = (key) => {\n  return process.browser ? Cookies.get(key) : null\n}\n","import { useState } from 'react'\nimport { connect } from 'react-redux'\nimport Router from 'next/router'\nimport fetch from 'isomorphic-unfetch'\nimport {\n  ERR_ALL_FIELDS_REQUIRED,\n  ERR_PASSWORDS_DONT_MATCH,\n  ERR_IN_USER_CREATION,\n  RESP_API_ERROR,\n  RESP_API_USER_CREATED,\n  SIGNUP_SUCCESS\n} from '../config/strings.js'\nimport {\n  BACKEND\n} from '../config/constants.js'\nimport {\n  signedIn\n} from '../redux/actions.js'\nimport setCookie from '../lib/session.js'\n\nfunction Login (props) {\n  const emptyStringPat = /^\\s*$/\n  const defaultSignupData = { email: '', pass: '', conf: '', err: '', msg: '' }\n  const defaultLoginData = { email: '', pass: '', err: '', msg: '' }\n\n  const [loginData, setLoginData] = useState(defaultLoginData)\n  const [signupData, setSignupData] = useState(defaultSignupData)\n\n  function redirectToHomeIfLoggedIn () {\n    if (!props.auth.guest) { Router.push('/') }\n  }\n\n  redirectToHomeIfLoggedIn()\n\n  async function handleLogin (event) {\n    event.preventDefault()\n\n    // validate the data\n    if (!loginData.email ||\n      emptyStringPat.test(loginData.pass)) {\n      return setLoginData(\n        Object.assign(\n          {},\n          loginData,\n          { err: ERR_ALL_FIELDS_REQUIRED, msg: '' }\n        )\n      )\n    }\n\n    // clear error message set by previous submissions, if there is any\n    setLoginData(Object.assign({}, loginData, { err: '', msg: '' }))\n\n    try {\n      const res = await fetch(`${BACKEND}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: `email=${loginData.email}&password=${loginData.password}`\n      })\n      const data = await res.json()\n\n      if (typeof data.token !== 'undefined') {\n        // set cookie\n        Cookies.set('token', data.token)\n\n        // save the token for future requests\n        props.dispatch(signedIn(data.token))\n\n        redirectToHomeIfLoggedIn()\n      }\n    } catch (err) {\n      // do nothing\n    }\n  }\n\n  async function handleSignup (event) {\n    event.preventDefault()\n\n    // validate the data\n    if (!signupData.email ||\n      emptyStringPat.test(signupData.pass) ||\n      emptyStringPat.test(signupData.conf)) {\n      return setSignupData(\n        Object.assign(\n          {},\n          signupData,\n          { err: ERR_ALL_FIELDS_REQUIRED, msg: '' }\n        )\n      )\n    }\n\n    if (signupData.pass !== signupData.conf) {\n      return setSignupData(\n        Object.assign(\n          {},\n          signupData,\n          { err: ERR_PASSWORDS_DONT_MATCH, msg: '' }\n        )\n      )\n    }\n\n    // clear error message set by previous submissions, if there is any\n    setSignupData(Object.assign({}, signupData, { err: '', msg: '' }))\n\n    try {\n      const res = await fetch(`${BACKEND}/auth/signup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: `email=${signupData.email}&password=${signupData.password}`\n      })\n      const data = await res.json()\n\n      if (data.message === RESP_API_ERROR) {\n        return setSignupData(\n          Object.assign(\n            {},\n            signupData,\n            { err: ERR_IN_USER_CREATION, msg: '' }\n          )\n        )\n      }\n\n      if (data.message === RESP_API_USER_CREATED) {\n        setSignupData(\n          Object.assign(\n            {},\n            defaultSignupData,\n            { err: '', msg: SIGNUP_SUCCESS }\n          )\n        )\n      }\n    } catch (err) {\n      // console.log(err)\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        <h2>Log in</h2>\n        <form onSubmit={handleLogin}>\n          <label> Email:\n            <input\n              type='email'\n              value={loginData.email}\n              onChange={\n                (e) => setLoginData(\n                  Object.assign({}, loginData, {\n                    email: e.target.value\n                  })\n                )}/>\n          </label>\n          <label> Password:\n            <input\n              type='password'\n              value={loginData.pass}\n              onChange={\n                (e) => setLoginData(\n                  Object.assign({}, loginData, {\n                    pass: e.target.value\n                  })\n                )}/>\n          </label>\n          <input type='submit' value='Submit' />\n        </form>\n      </div>\n      <div>\n        <h2>Sign up</h2>\n        <form onSubmit={handleSignup}>\n          {signupData.msg &&\n            <div>{signupData.msg}</div>\n          }\n          {signupData.err &&\n            <div>{signupData.err}</div>\n          }\n          <label> Email:\n            <input\n              type='email'\n              value={signupData.email}\n              onChange={\n                (e) => setSignupData(\n                  Object.assign({}, signupData, {\n                    email: e.target.value\n                  })\n                )}/>\n          </label>\n          <label> Password:\n            <input\n              type='password'\n              value={signupData.pass}\n              onChange={\n                (e) => setSignupData(\n                  Object.assign({}, signupData, {\n                    pass: e.target.value\n                  })\n                )}/>\n          </label>\n          <label> Confirm password:\n            <input\n              type='password'\n              value={signupData.conf}\n              onChange={\n                (e) => setSignupData(\n                  Object.assign({}, signupData, {\n                    conf: e.target.value\n                  })\n                )}/>\n          </label>\n          <input type='submit' value='Submit' />\n        </form>\n      </div>\n    </div>\n  )\n}\n\nLogin.getInitialState = async ({ store, isServer, pathname, query }) => {\n  return { store }\n}\n\nexport default connect(state => state)(Login)\n"],"mappings":"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","sourceRoot":""}